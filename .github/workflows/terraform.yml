name: 'Terraform'

on:
  push:
    branches: 
      - main
#    paths:
#      - terraform/**
#      - ansible/**

permissions:
  contents: write
  pull-requests: write 
  issues: read
  packages: none

env:
 # verbosity setting for Terraform logs
 TF_LOG: INFO

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash   
        working-directory: ./terraform     
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.5
        
    - name: Terraform Init
      id: init      
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: terraform init -upgrade

    - name: Terraform Format
      id: fmt      
      run: terraform fmt -check

    - name: Terraform Validate
      id: validate      
      if: success() || failure()
      run: terraform validate
    
    - name: Terraform Plan
      id: plan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        TF_VAR_vm_admin_password: ${{ secrets.TF_VAR_vm_admin_password }}
      run: terraform plan -out apply.tfplan -var-file=student.tfvars

    - name: Terraform Plan Verification
      id: verify
      run: |
        echo "Verify the Terraform plan output above."
        echo "If everything looks good, proceed with the apply step."
        read -p "Do you want to apply the changes? (yes/no): " confirm
        if [ "$confirm" != "yes" ]; then
          echo "Terraform apply was cancelled."
          exit 1
        fi
    - name: Terraform Apply      
      id: apply
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        TF_VAR_vm_admin_password: ${{ secrets.TF_VAR_vm_admin_password }}
      run: terraform apply apply.tfplan

    - name: Proceed to Destroy
      id: verify_destroy
      run: |
        echo "Proceed to destroy."
        read -p "Do you want to proceed to destroy? (yes/no): " confirm
        if [ "$confirm" != "yes" ]; then
          echo "Terraform apply destroy was cancelled."
          exit 1
        fi      
    
    - name: Terraform Destroy Plan
      id: destroy-plan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: terraform plan -destroy -out destroy.tfplan -var-file=student.tfvars
    
    - name: Terraform Destroy Verification
      id: verify-destroy
      run: |
        echo "Verify the Terraform destroy plan output above."
        echo "If everything looks good, proceed with the destroy step."
        read -p "Do you want to destroy the resources? (yes/no): " confirm
        if [ "$confirm" != "yes" ]; then
          echo "Terraform destroy was cancelled."
          exit 1
        fi
    
    - name: Terraform Destroy
      id: destroy
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        TF_VAR_vm_admin_password: ${{ secrets.TF_VAR_vm_admin_password }}
      run: terraform apply destroy.tfplan